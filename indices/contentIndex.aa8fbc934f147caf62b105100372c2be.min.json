{"/":{"title":"Devoxx 2022 - Notes","content":"![[attachments/Pasted image 20221010094128.png]]\n\nWelcome to my notes from the **[Devoxx 2022](https://devoxx.be/)** conference days.\n\n-\u003e [[notes/About me | About me]]\n\n---\nYou can explore my notes day by day :\n- [[notes/wednesday | Wednesday]]\n- [[notes/thursday | Thursday]]\n- [[notes/friday | Friday]]\n\nOr by navigating the graph below. \n\n---\n\n","lastmodified":"2022-10-14T09:54:29.553048135Z","tags":null},"/notes/About-me":{"title":"About me","content":"\nMy name is Renaud Pirson. I'm a java/angular developer @ [5thFloor](https://5thfloor.be)\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Ahead-Of-Time":{"title":"Ahead Of Time","content":"Ahead of time compilation. by opposition to Just in Time compilation","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/An-introduction-to-Residual-Theory":{"title":"An introduction to Residual Theory","content":"by *Barry O'Reilly*\n\n## The problem\n*Why is architechture so difficult?*\n\nWe don't know the potential futures of our system but we have to take decisions about the system.\n\nDialogque betwen the ordered system of the software and the disordered system of the world.\n=\u003e HyperliminalSystem\n\nRandom events occur un the real world that will stress our model. To counteract this we tend to reduce the scope of the wolrd that interracts with our system, but it's the result of the biaises of the stakholders of the project. Sooner or later, however, something will happen from outside of our bubble and will take us by surprise.\n\nUncertainty and the Complexity Science\n\n## Residuality Theory\n\nresidue = the system after an event that occurs and damages the system.\nThe next steps will be a function of that residue.\n\nWe cannot predict the event, but we can decide the structure of the residue.\n\n### Conscepts from Complexity Science applied to software\n### Random simulation\n\nRequirements are like a random simulation of the environments. \nWe are limited by bias in our somulation. (curse of high dimensionality)\n\n### Kauffman Networks\nNKP analysis\n\na software is a combination of random simulation followed by an NKP analysis.\n\nNKP analysis is limited by our architechural habits ([[notes/Domain Driven Design]], or other patterns)\n\n\nAttractor Networks \u0026 Residues\n\nPlanning for a few of different events can make the system survive a lot more events that we didn't even plan for.\n=\u003e **Stressors analysis**\n\nContagion Analysis : findung invisible coupling (hyperliminal coupling)\n\n\n\n#readMore","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/App-modernization":{"title":"App modernization","content":"\nSustaineing and maintaning old applications is hard.\n\nHow to send an elephant to the cloud ?\n\nDefinitions of modernization by companies :\n- containers\n- automating to reduce operation costs\n- bring workload to the cloud\n- ci/CD\n- microservices\n\nReasons for modernization:\n- scalability\n- reliability\n- decrease costs\n- security\n- customer experience\n- employee productivity\n\nSome challenges of migration :\n- legacy code cant be changes\n\t- sometimes we don't even have access to it\n- New services depend on data managed by legacy apps\n\t- data quality might be an issue\n\t- cannot change the structure to not break legacy code\n\t\t- you duplicate but then =\u003e data incnsistancies\n\n##Modernizing and ogmenting with low to zero impact on legacy\n\n- **rewrite/replace**\n- **Lift\u0026Shift** : modernize the platform / hardware to improve performence / release without touching the application\n- Refactor/Augment- extend\n\n## Refactoring strategies\n\n- Data capture\n- Event-drivent architecture\n\nDo not connect your new microservice to the legacy database\nDo not make your service write data in multiple databases\n\n### Debezium\nGenerates events based on the activity on a legacy database that can be sent to a kafka stream. The new service can then update it's database listening to that stream.\n\non the new service \n**Quarkus + Apache Camel**\n\n### Changed Data Capture Pattern \n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Artificial-Intelligence-You-are-here":{"title":"Artificial Intelligence - You are here","content":"\nKeyNote by Dr Alan D. Thompson\n\n## [[notes/LLM Transformers|Transformer]] model\n\nNew model for [[notes/artificial intelligence| AI]].\nInventend when trying to translate from gendered languages to non gendered languages.\n\n[[GPT-3]]\nLayer of [[notes/LLM Transformers|transformer]] decoders.\nMultiple transformers handling different parts of the context.\n\nWe don't yet understand how these transformers work. They are a black box.\n\n\n\n### Code Gen\n\n- **GoodeGeex** : generate code using prompts \nhuggingface.co.uk/\n- **OpenAI**: http://beta.openai.com\n- SalesForce **CodeGen** =\u003e opensource and free\n\nbooks:\n- Pharmako AI\n- Magoc's a Hoot : written with AI\n#readMore \n\n### Writing\nhttp://onceuponabot.com\n\nWrites a story based on a prompt + images\n\n\n### Images\n- Google Parti\n- Stable diffusion\n- Dall-E 2\n- Google Imagen Video\n- Craiyon","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Clean-code-with-Records-Sealed-Classes-Pattern-matching":{"title":"Clean code with Records - Sealed Classes -Pattern matching","content":"by *Jos√© Paumard*\n\nnew features of [[notes/java 19 |Java19]]\n\n## [[notes/Record class|Record]]\n\nA record is a child of the Record class, so it cannot extend anything.\nIt 's immutable.\n\nOverride the **cannonical constructor** for:\n- It's a good idea to create a defensive copy of an arraylist that you pass to make it really immutable. \n- validation\n\n**Compact constructor\n- for validation\n\n\n\u003e [!WARNING] \n\u003e You cannot create a constructor that doesn't call the cannonical constructor\n\n\n## [[notes/Pattern Matching |Pattern Matching]]\n\nAdding responsability to your business model is not always a good idea.\nViolates the single responsability principle.\n\nIf you externalize that responsability, you will have to do some casting to process subclasses.\n\n=\u003e patternMatching for *instanceOf* \n\nFirst step into pattern matching.\n\ncan be used in [[notes/switch expressions|switch expressions]].\n```java\nreturn switch(shape){\n\tcase Circle circle -\u003e ...\n\tcase Square square -\u003e ...\n\tdefault -\u003e ...\n}\n```\nin this example : `Circle circle` is a pattern\n\n\n### Sealed type\n\na type that knows it's extensions.\n```java\npublic sealed interface Shape\npermits Circle, Square{\n\n}\n```\n\nIf the class is sealed, you don't need the default value in the switch :\n\n```java\nreturn switch(shape){\n\tcase Circle circle -\u003e ...\n\tcase Square square -\u003e ...\n}\n```\n\nUsing this, you can make sure you have an implementation for all the sublasses of a type, it's safer.\n\nNext step in pattern matching: **record pattern matching**\n\nNext :\nArray Patten Matching\nNested Patterns\nPatterns from existing classes\n\n#readMore ","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Confessions-of-a-rusty-java-developer":{"title":"Confessions of a rusty java developer","content":"\n## What is RUST\n- C-like syntax\n- strongly typed (with inference)\n- statements\n\t- variable bindings\n\t- expressions\n\n### Most things are expressions\n- functions\n- variable assignments\n- implicit return when no \";\"\n\n**Rust has no**\n- null pointer\n- exceptions\n\n### Rust has algebraic data types.\n Enum have states\nOption type, like optional in java\n- some\n- none\nResult type:\n- ok\n- Err \n\n### [[notes/Pattern Matching]] and destructuring\nexamples were given\n\n## Differences with java\n- no garbage collector\n- everything is immutable by default\n- everything is private by default\n\n### Ressource allocation\nMemory is allocated in scopes and freed at the end of the scope\n\n### Ownership\nOnly one owner to a memory value.\nSo you can borrow a reference, as long as it's immutable.\n\n### Explicit lifetimes\n\nyou can specify hte lifetimes of hte memory allocations and some relationships between lifetimes.\n=\u003e The compiler educates you and the code becomes simpler and faster.\n\n### Leads to clearer API's\nWhen your dataflow is clearly defind, you can know very precisely how you're supposed to use an api and how the data will be used.\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Domain-Driven-Design":{"title":"Domain Driven Design","content":"","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/GraalVM":{"title":"GraalVM","content":"","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Internet-of-Things":{"title":"Internet Of Things","content":"","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/IoT-in-the-trenches-at-scale":{"title":"IoT in the trenches at scale","content":"[[notes/Internet of Things|Iot]] usually follows a pattern\n\nSensors and actuators communicate with an application\n\nBut then there's a lot of questions that arise when you want to scale: \n- Bad communication\n- monitoring\n- remote management\n- security\n- ...\n\nFallacies of distributed computing:\n- network is reliable\n- latency is 0\n- bandiwth is infinite\n- network is secure\n- topology doesn't change\n- there's 1 administrator\n- transport cost is 0\n- network is homogeneous\n\nThe goal of the AWS components for [[notes/Internet of Things|IoT]] is to make this list seem true-ish.\n\nNetworks is always imperfact, communication will fail, you have to account for that all the time.\n\n### Error handling\n\n```java\ntry{\n\tleapOfFaith();\n}catch(Throwable t){\n\txyz();\n}\n```\nThis is not an anti-pattern in the world of IoT, it's the strength of Java to be able to recover from any kind of unpmanned error.\n\nThe modern JVM is available on a wide variety of operating systems, so it makes java really good for IoT programming.\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Java-is-agile":{"title":"Java is agile","content":"\nby *Venkat Subramaniam*\n\n# Java *is* Agile\n\n## What is [[notes/agile]] ?\nStand up metings ? \nHumans love ceremonies\n\n**SCRUM MASTERS** !!\n= \u003e LOL\n\nAgile Development = Feedback driven development\n\n## Java\nJava is now an old language. It has survived very long and is still relevant.\n\nThe pace of java evolution has increased last years. Released every 6 months\n\nIt is **NOT** developed in 6 months cycles, some features take multiple years to develop.\n\nIT is **RELEASED** on a ¬ß months cycle.\n\n**Features get on the release train when their ready, the trains depart every 6 months**\n\nNot committing to features until we know they will really be usefull.\n =\u003e feedback is key here\n\n\u003e [!IMPORTANT] True Agility\n\u003e Decoupling development cycle from release cycle\n\nLegacy is a funny word, usually it us used for the best things we leave for the next generation. In software dev it usually means technical debt.\n\nJava is still a good legacy for programmers\n10M developpers in java\n\nDemo :  [[notes/java 19]]\n\nDo you work for hte compiler or does the compiler work for the compiler.\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/LLM-Transformers":{"title":"LLM Transformers","content":"\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Microfronted-with-multiple-frameworks":{"title":"Microfronted with multiple frameworks","content":"\nUsing Webpack 5 module Federation\n\nBookref:: Enterprise Angular\n\n[[notes/Microfrontend]]: applying the same reasonning that brought [[notes/microservices|microservices]] to the frontend. That way, a team can have the responsibility of a domain on the whole stack.\n\nWebPack can bundle multiple modules together, each module can be a separate component.\n\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Microfrontend":{"title":"Microfrontend","content":"Architecture pattern for [[notes/frontend|frontend]] attplications that cover multiple [[notes/microservices|microservices]].\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/ORM-20-years-later":{"title":"ORM 20 years later","content":"\nAvoid lazy fetching at runtime, but always map associations lazy.\nuse join fetch to eagerly fetch in specific queries.\n\nOver time, the number of queries in an application grows much faster than the number of tables.\n\nSources of discomfort in hibernate :\n- an extra library to learn and understand\n- more difficult to debug and understand than some handwritten code\n- error reporting was not the most helpfull in hibernate\n- some users struggle dealing with managed entities and persistence contexts\n\nHand written code can still be as discomfortable... so it's not fair to only blame hibernate.\n\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Pattern-Matching":{"title":"Pattern Matching","content":"","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Project-Loom":{"title":"Project Loom","content":"","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Pure-Agile":{"title":"Pure Agile","content":"*Building a culture without **Scrum**, **Kanban** and **XP**.*\nby *Lemi Orhan Ergin*\n\n\nWhat are the real questions the scrum rules try to solve ?\n\n[[notes/agile|Agile]] principles are easy to undersand but difficult to master.\n\nTechnical practices need a whole team to adhere to them for them to be effective, needs practice and hard to achieve. \n\nWe heare that AGILE = GOOD\n\nUsually, Agile is explained by implementing scrum, kanban or xp.\n\nOn the other hand, some organisations don't care about agile and still succeed.\nThey care about :\n- product\n- team\n- customers\n\n\u003eLet's abandon the word agile to the people who don't do things, Instead let's use a word that describes whet de do\n\\Dave Thomas\n\nThe agile manifesto did not invent Agile, they gave a common name ot successfull principles that worked for them.\n\n2020's : Pure Agile movement\nBeing agile without talking about it.\n- no rules\n- no formula\n- focus on customer team and product\n- evaluate needs and problems\n- create your own model\n\n## Core principles to design your cultural model\n\n- Never talk about being agile !\n\t- stop sharing quotes\n\t- stop creating fake problems\n\t- start learning how others succeed\n\t- start referencing your values\n\t- talk about product\n- Know your team well and trust them\n\t- Earn thrust befor wating to be earned\n\t- work chat with everyone\n\t- be with the team\n\t- ask feedback from the team\n\t- you can not succeed if you don't know the team\n- Get management's support and facilitation\n\t- Managers should know the pain of pbeing in the kitchen\n\t- managers should be accessible\n\t- managers should be role models\n\t- managers should be a team member getting things done\n- Inspiring purpose to focus the team\n\t- people should feel proud of the purpose\n\t- stop setting purposes like technical stuff\n- define the baseline of your culture\n\t- The culture should reflect whet you do \n\t\t- how you react to crises\n\t\t- avoid toxic behaveour\n\t- hire people that build social cohesion in hte team\n\t- never lose focus from increasing diversity and ethics\n\t- be transparent\n- Take achtion only if it's needed, don't create fake problems to justify rituals\n\t- Evaluate the real need before practicing methodology\n\t- start from blanck papend and add one by one\n\n## Core practices\n\u003e Continuously responding the change fast to satisfy customers with the whole team.\n1. responding fast\n\t1. deliver fast\n\t\t1. you need to become a domain expert to be able to deliver and develop fast\n\t\t2. you need to master your tools\n\t\t3. easy to be changed : SOLID, somple design, \n\t2. learn fast\n\t\t1. from team\n\t\t2. from customer\n\t\t3. from product\n\t3. provide support fast\n2. continuously\n\t1. sustainablility\n\t2. improve hiring process\n\t3. metorship\n\t4. Drop seniority level, focus on competence\n3. to change\n\t1. keeo track of process\n\t2. keep flow deterministic\n\t3. be ready for change\n\t\t1. hexagonal architecture\n\t4. iterate\n\t5. experiment\n4. satisfy cunstomer\n\t1. identify expectations\n\t2. meet expectations\n\t3. surpass expectations\n5. the whole team\n\t1. cultivate professionalisme\n\t\t1. be the role model\n\t\t2. be an apprentice\n\t\t3. own you career\n\n\nYour organisation, your team is special, create a model fitting your needs.\n\n#readMore ","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Qwik":{"title":"Qwik","content":"*A no [[hydration]] instant on personnalized web app.*\n\nThe startup time of you application si key to make users stay and come back to the site.\n\n**Javacript** is mostly the issue when it comes to performance.\n\nEven in the top 50 websites, js is still really slowing things down.\n\n## How to fix Javascript ?\n\nWith Qwik, the complexity of hte application doesn't impact the startup time.\n\nIn the past :\n- php\n- ruby on rails\n- jquery\n=\u003e was  performent, but the dev was slow\n\nNow :\n- angular\n- view\n- react\n- ...\n=\u003e fast dev, scales, unified model but super slow\n\nFuture :\n- Google wiz\n- Qwick\n- Marko v6\n\n=\u003e **easy to build AND fast** \n\n## Advantages of Qwick\nFocuses on **startup time**\n\n### Resumable\nThe app can skip the javascript bootup process (hydration). The state of the app is serialized and sent as html to the browser without any startup time.\n\nThe app can start just like a VM that has been paused and resumed.\n\nWith resumable frameworks, few JS is downloaded, it's loaded when the user interracts with the page.\n\n### Demo\nWhen you click on a button, the JS specific to that button is DL, not even the framework gets downloaded.\n\nEverything gets serialized, even functions.\n\nQuick looks quite like react when developping.\n\n***$*** : marks lazy loading points\n\n**The javascript can also be delayed until the user scrolls and the component gets visible !**\n(default behaviour)\n\n\u003e [!INFO] \n\u003eOnly the complexity of a specific operation will impact the performance of that operation. It doesn't impact the rest of the app or the startup time.\n\nThere is a service worker anticipating what the user could do and downloads the JS on a separate thread in the meantime (still only linked to what's visible).\n\n### Personnalization\nstill in dev.\n\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Record-class":{"title":"Record class","content":"\nSimple pojo class with automatic\n- constructor\n- hashcode\n- equals\n- tostring\n- public members","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Spring-Boot":{"title":"Spring Boot","content":"","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Spring-framework-6":{"title":"Spring framework 6","content":"\ntarget  date : 2022-11\n\n[[notes/Spring Boot|Spring Boot]] 3.0 : idem\n\nSteps to spring boot 3\n- Upgrate minor versions (migration guides)\n- Java17\n- Check depreciation in code\n- Blog post on spring.io\n\nSupporting Jakarta EE9+ \n\n### Exception handling\nUsing ExceptionsHandlers for each exception types returning more usefull infor to the clients.\nCan be declared globally in a ControllerAdvice class\n\n### [[notes/Ahead Of Time|AOT]] \u0026 [[notes/GraalVM|GraalVM]]\n\n### Java interface client\n\nCreating a simple rest client using a simple interface with \n```java\n@GetExchange()\n```\n\n### [[notes/Project Loom|Loom]] Support","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Taming-hte-event-chaos-using-a-workflow-engine":{"title":"Taming hte event chaos using a workflow engine","content":"## 4 laws of software development (Jeff Atwood)\n- The nature of software is to expand\n- software is limited by Moore's law\n- Software frowth makes Moore's law possible\n- Software is limited only by humad ambition and imagination\n\nSoftware development is a state of perpetual crisis.\n\nNow, Moore's law doesn't apply anymore. The burden of scaling now falls to the developer\n\n\n\u003e [!NOTE] \n\u003e Software development is hard and chaotic\n\n## Flowable\nA visual based framework.\n\nA visual model is where technical people and business people can meet.\n\n\n\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/The-art-of-java-language-Pattern-Matching":{"title":"The art of java language Pattern Matching","content":"\nHistorically, we've had *java.util.regex*.\n\nThat's not the subject, it's gonna be about [[notes/Pattern Matching|language level patterns]].\n\nA pattern is\n- a match predicate : determines whether the pattern matches a target\n- pattern variables : conditionally extracted if the pattern matches the target.\n\n## Pattern Types\n- constant\n\t- match on a constant (already un use in a switch statement)\n- Type\n\t- match on a type\n- Deconstruction\n\t- Match and extract\n- var\n\t- Uses type inference to map to a type pattern\n- Any( _ )\n\t- Matches anything but binds to nothing (an unused pattern variable)\n\n\n## Switch Expressions\nUsed to be a statement. No concept of generating a result that could be assigned\nError prone if you forget the `break;` statement.\n\n=\u003e [[notes/switch expressions | Switch Expression]]\nNow the switch returns a value.\n- The compa$iler can check that we always have a value\n- tidier\n- immutable\n\n## [[notes/Record class|Record]]\n```java\nrecord Point(double x, double y);\n\nrecord Anything\u003cT\u003e(T t);\n```\n\n* Implicitly final.\n* Don't follow the bean pattern\n\t* x(), not getX()\n* base class is java.lang.Record\n\t* cannot be sublassed\n\n## Inheritance\nA class can be sub-classed by any class. No control on who can sublass\n=\u003e new Sealed Classes\n`permits X, Y` \n\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/Welcome-to-Devoxx-2022":{"title":"Welcome to Devoxx 2022","content":"## [[notes/artificial intelligence|AI]]\n- [[LLM Transformers]] are the new hot thing in [[notes/artificial intelligence|AI]], replacing Neural Network ?\n- Art : \n\t- Stable Diffusion\n\t- Dall-E 2\n\n## [[notes/java 19|Java 19]]\n- [[notes/Pattern Matching]]\n- \n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/agile":{"title":"Agile","content":"","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/artificial-intelligence":{"title":"Artificial Intelligence","content":"\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/friday":{"title":"friday","content":"## conferences\n- [[notes/App modernization]]\n- [[notes/why dont you create your next application without a database]]\n- [[ORM 20 years later]] ","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/frontend":{"title":"Frontend","content":"","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/java-19":{"title":"java 19","content":"\n## New features\n- [[String blocks]] : multi line strings\n- Smart casting ? [[notes/Pattern Matching]]\n- [[notes/Record class]]\n- [[notes/switch expressions]] \n- [[notes/Project Loom]] ","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/microservices":{"title":"Microservices","content":"Architectural pattern consisting in dividing a complex application / domain in smaller \"standalone\" applications that can be deployed separately.\n\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/switch-expressions":{"title":"switch expressions","content":"\nA switch that returns a result. ends with a **;** \nNo mutation involved.","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/thursday":{"title":"Thursday","content":"## Conferences\n- [[notes/Confessions of a rusty java developer]]\n- [[notes/IoT in the trenches at scale]]\n- [[notes/Qwik]] \n- [[notes/The art of java language Pattern Matching]]\n- [[notes/Taming hte event chaos using a workflow engine]]\n- [[notes/Pure Agile]]\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/wednesday":{"title":"wednesday","content":"\n## Keynotes\n- [[notes/Welcome to Devoxx 2022]]\n- [[notes/Artificial Intelligence - You are here]]\n- [[notes/Java is agile]]\n\n## Conferences\n- [[notes/Spring framework 6]]\n- [[notes/Clean code with Records - Sealed Classes -Pattern matching]]\n- [[notes/Microfronted with multiple frameworks]]\n- [[notes/An introduction to Residual Theory]]","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null},"/notes/why-dont-you-create-your-next-application-without-a-database":{"title":"Why don t you create your next application without a database","content":"\nDatabase in this talk can be understood as any external storage out of your java application.\n\nData is everywhere and the vast majority of applications care about data and try to store them in some way.\n\nThe usual solutions to store data are databases, but there's a lot of complexity that comes with using them :\n- Need for DBA\n- Frameworks - hybernate\n- caching\n- mapping to objects\n- Testability issues\n- Statistics\n- Slow Queries\n\nHow about we try something new ?\n\n## JVM memory as Primary Data Source\nJVM as database = Microstream\n- Queries become easy with the stream API\n- fast\n- No convension\n- Faster to develop\n\n### Binary serialisation : Next generation java serialisation engine (MicroStream).\n\nStores a binary representation of the java objects :\n- on disk\n- in a no-sql database\n\nMicrostream will load your data in memory at runtime\n\n## Demo\n\nJust add the microstream dependency.\n\nIn your startup, you start a storagemanager.\nThe Data storage is just a pojo.\n\n\n\u003e [!NOTE] \n\u003e Synergizes well with the new Record types\n\nStorage configuration is configurable programmatically.\n\nWhat about large collections of data that don't fit in hte HEAP ?\n\nPossible of course, you can defin some lazy collections that will be loaded only when needed. Those lazy fields will be collected by the GC when he needs space, so they won't stay in memory.\n\nOpen source version is for 1 single JVM.\n","lastmodified":"2022-10-14T09:54:29.569049031Z","tags":null}}