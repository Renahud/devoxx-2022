{"/":{"title":"Devoxx 2022 - Notes","content":"![[attachments/Pasted image 20221010094128.png]]\n\nWelcome to my notes from the **[Devoxx 2022](https://devoxx.be/)** conference days.\n\n-\u003e [[notes/About me | About me]]\n\n---\nYou can explore my notes day by day :\n- [[notes/wednesday | Wednesday]]\n- [[notes/thursday | Thursday]]\n- [[notes/friday | Friday]]\n\nOr by navigating the graph below. \n\n---\n\n","lastmodified":"2022-10-12T15:09:41.672982318Z","tags":null},"/notes/About-me":{"title":"About me","content":"\nMy name is Renaud Pirson. I'm a java/angular developer @ [5thFloor](https://5thfloor.be)\n","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/An-introduction-to-Residual-Theory":{"title":"An introduction to Residual Theory","content":"by *Barry O'Reilly*\n\n## The problem\n*Why is architechture so difficult?*\n\nWe don't know the potential futures of our system but we have to take decisions about the system.\n\nDialogque betwen the ordered system of the software and the disordered system of the world.\n=\u003e HyperliminalSystem\n\nRandom events occur un the real world that will stress our model. To counteract this we tend to reduce the scope of the wolrd that interracts with our system, but it's the result of the biaises of the stakholders of the project. Sooner or later, however, something will happen from outside of our bubble and will take us by surprise.\n\nUncertainty and the Complexity Science\n\n## Residuality Theory\n\nresidue = the system after an event that occurs and damages the system.\nThe next steps will be a function of that residue.\n\nWe cannot predict the event, but we can decide the structure of the residue.\n\n### Conscepts from Complexity Science applied to software\n### Random simulation\n\nRequirements are like a random simulation of the environments. \nWe are limited by bias in our somulation. (curse of high dimensionality)\n\n### Kauffman Networks\nNKP analysis\n\na software is a combination of random simulation followed by an NKP analysis.\n\nNKP analysis is limited by our architechural habits (DDD, or other patterns)\n\n\nAttractor Networks \u0026 Residues","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/Artificial-Intelligence-You-are-here":{"title":"Artificial Intelligence - You are here","content":"\nKeyNote by Dr Alan D. Thompson\n\n## [[Transformer]] model\n\nNew model for AI.\nInventend when trying to translate from gendered languages to non gendered languages.\n\nGPT-3\nLayer of [[notes/LLM Transformers|transformer]] decoders.\nMultiple transformers handling different parts of the context.\n\nWe don't yet understand how these transformers work. They are a black box.\n\n\n\n### Code Gen\n\n- **GoodeGeex** : generate code using prompts \nhuggingface.co.uk/\n- **OpenAI**: http://beta.openai.com\n- SalesForce **CodeGen** =\u003e opensource and free\n\nbooks:\n- Pharmako AI\n- Magoc's a Hoot : written with AI\n\n\n### Writing\nonceuponabot.com\nwrites a story based on a prompt + images\n\n\nImages\n- Google PArti\n- Stable diffusion\n- Dall-E 2\n- Google Imagen Video\n- Craiyon","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/Clean-code-with-Records-Sealed-Classes-Pattern-matching":{"title":"Clean code with Records - Sealed Classes -Pattern matching","content":"by *José Paumard*\n\nnew features of [[notes/java 19]]\n\n## [[notes/Record class|Record]]\n\nA record is a child of the Record class, so it cannot extend anything.\nIt 's immutable.\n\nOverride the **cannonical constructor** for:\n- It's a good idea to create a defensive copy of an arraylist that you pass to make it really immutable. \n- validation\n\n**Compact constructor\n- for validation\n\n\n\u003e [!WARNING] \n\u003e You cannot create a constructor that doesn't call the cannonical constructor\n\n\n## [[Pattern Matching]]\n\nAdding responsability to your business model is not always a good idea.\nViolates the single responsability principle.\n\nIf you externalize that responsability, you will have to do some casting to process subclasses.\n\n=\u003e patternMatching for *instanceOf* \n\nFirst step into pattern matching.\n\ncan be used in switch expressions.\n```java\nreturn switch(shape){\n\tcase Circle circle -\u003e ...\n\tcase Square square -\u003e ...\n\tdefault -\u003e ...\n}\n```\nin this example : `Circle circle` is a pattern\n\n\n### Sealed type\n\na type that knows it's extensions.\n```java\npublic sealed interface Shape\npermits Circle, Square{\n\n}\n```\n\nIf the class is sealed, you don't need the default value in the switch :\n\n```java\nreturn switch(shape){\n\tcase Circle circle -\u003e ...\n\tcase Square square -\u003e ...\n}\n```\n\nUsing this, you can make sure you have an implementation for all the sublasses of a type, it's safer.\n\nNext step in pattern matching: **record pattern matching**\n\nNext :\nArray Patten MAtching\nNested Patterns\nPatterns from existing classes\n\n","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/Java-is-agile":{"title":"Java is agile","content":"\nby *Venkat Subramaniam*\n\n# Java *is* Agile\n\n## What is agile ?\nStand up metings ? \nHumans love ceremonies\n\n**SCRUM MASTERS** !!\n= \u003e LOL\n\nAgile Development = Feedback driven development\n\n## Java\nJava is now an old language. It has survived very long and is still relevant.\n\nThe pace of java evolution has increased last years. Released every 6 months\n\nIt is **NOT** developed in 6 months cycles, some features take multiple years to develop.\n\nIT is **RELEASED** on a § months cycle.\n\n**Features get on the release train when their ready, the trains depart every 6 months**\n\nNot committing to features until we know they will really be usefull.\n =\u003e feedback is key here\n\n\u003e [!IMPORTANT] True Agility\n\u003e Decoupling development cycle from release cycle\n\nLegacy is a funny word, usually it us used for the best things we leave for the next generation. In software dev it usually means technical debt.\n\nJava is still a good legacy for programmers\n10M developpers in java\n\nDemo :  [[notes/java 19]]\n\nDo you work for hte compiler or does the compiler work for the compiler.\n","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/LLM-Transformers":{"title":"LLM Transformers","content":"\n","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/Microfronted-with-multiple-frameworks":{"title":"Microfronted with multiple frameworks","content":"\nUsing Webpack 5 module Federation\n\nBookref:: Enterprise Angular\n\nMicrofrontend: applying the same reasonning that brought microservices to the frontend. That way, a team can have the responsibility of a domain on the whole stack.\n\nWebPack can bundle multiple modules together, each module can be a separate component.\n\n","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/Pattern-Matching":{"title":"","content":"","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/Project-Loom":{"title":"Project Loom","content":"","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/Record-class":{"title":"Record class","content":"\nsimple pojo class with automatic\n- constructor\n- hashcode\n- equals\n- tostring\n- public members","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/Spring-framework-6":{"title":"Spring framework 6","content":"\ntarget  date : 2022-11\n\n[[Spring Boot]] 3.0 : idem\n\nSteps to spring boot 3\n- Upgrate minor versions (migration guides)\n- Java17\n- Check depreciation in code\n- Blog post on spring.io\n\nSupporting Jakarta EE9+ \n\n### Exception handling\nUsing ExceptionsHandlers for each exception types returning more usefull infor to the clients.\nCan be declared globally in a ControllerAdvice class\n\n### AOT \u0026 [[GraalVM]]\n\n### JAva interface client\n\nCreating a simple rest client using a simple interface with \n```java\n@GetExchange()\n```\n\n### [[notes/Project Loom|Loom]] Support","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/Welcome-to-Devoxx-2022":{"title":"","content":"## AI\n- [[LLM Transformers]] are the new hot thing in AI, replacing Neural Network ?\n- Art : \n\t- Stable Diffusion\n\t- Dall-E 2\n\n## Java 19\n- [[Pattern matching]]\n","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/friday":{"title":"friday","content":"","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/java-19":{"title":"java 19","content":"\n## New features\n- [[String blocks]] : multi line strings\n- Smart casting ? [[Pattern matching]]\n- [[Record class]]\n- [[switch expressions]] \n- [[Project Loom]] ","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/switch-expressions":{"title":"switch expressions","content":"\nA switch that returns a result. ends with a **;** \nNo mutation involved.","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/thursday":{"title":"thursday","content":"","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null},"/notes/wednesday":{"title":"wednesday","content":"\n## Keynotes\n- [[notes/Welcome to Devoxx 2022]]\n- [[notes/Artificial Intelligence - You are here]]\n- [[notes/Java is agile]]\n\n## Conferences\n- [[notes/Spring framework 6]]\n- [[notes/Clean code with Records - Sealed Classes -Pattern matching]]\n- [[notes/Microfronted with multiple frameworks]]\n- [[notes/An introduction to Residual Theory]]\n- ","lastmodified":"2022-10-12T15:09:41.688982493Z","tags":null}}