<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Devoxx 2022 - Notes on</title><link>https://renahud.github.io/devoxx-2022/</link><description>Recent content in Devoxx 2022 - Notes on</description><generator>Hugo -- gohugo.io</generator><language>fr-be</language><atom:link href="https://renahud.github.io/devoxx-2022/index.xml" rel="self" type="application/rss+xml"/><item><title>About me</title><link>https://renahud.github.io/devoxx-2022/notes/About-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/About-me/</guid><description>My name is Renaud Pirson. I&amp;rsquo;m a java/angular developer @ 5thFloor</description></item><item><title>Agile</title><link>https://renahud.github.io/devoxx-2022/notes/agile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/agile/</guid><description/></item><item><title>Ahead Of Time</title><link>https://renahud.github.io/devoxx-2022/notes/Ahead-Of-Time/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Ahead-Of-Time/</guid><description>Ahead of time compilation. by opposition to Just in Time compilation</description></item><item><title>An introduction to Residual Theory</title><link>https://renahud.github.io/devoxx-2022/notes/An-introduction-to-Residual-Theory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/An-introduction-to-Residual-Theory/</guid><description>by Barry O&amp;rsquo;Reilly
The problem Why is architechture so difficult?
We don&amp;rsquo;t know the potential futures of our system but we have to take decisions about the system.</description></item><item><title>Artificial Intelligence</title><link>https://renahud.github.io/devoxx-2022/notes/artificial-intelligence/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/artificial-intelligence/</guid><description/></item><item><title>Artificial Intelligence - You are here</title><link>https://renahud.github.io/devoxx-2022/notes/Artificial-Intelligence-You-are-here/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Artificial-Intelligence-You-are-here/</guid><description>KeyNote by Dr Alan D. Thompson
[[notes/LLM Transformers|Transformer]] model New model for [[notes/artificial intelligence| AI]]. Inventend when trying to translate from gendered languages to non gendered languages.</description></item><item><title>Clean code with Records - Sealed Classes -Pattern matching</title><link>https://renahud.github.io/devoxx-2022/notes/Clean-code-with-Records-Sealed-Classes-Pattern-matching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Clean-code-with-Records-Sealed-Classes-Pattern-matching/</guid><description>by Jos√© Paumard
new features of [[notes/java 19 |Java19]]
[[notes/Record class|Record]] A record is a child of the Record class, so it cannot extend anything.</description></item><item><title>Confessions of a rusty java developer</title><link>https://renahud.github.io/devoxx-2022/notes/Confessions-of-a-rusty-java-developer/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Confessions-of-a-rusty-java-developer/</guid><description>What is RUST C-like syntax strongly typed (with inference) statements variable bindings expressions Most things are expressions functions variable assignments implicit return when no &amp;ldquo;;&amp;rdquo; Rust has no</description></item><item><title>Domain Driven Design</title><link>https://renahud.github.io/devoxx-2022/notes/Domain-Driven-Design/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Domain-Driven-Design/</guid><description/></item><item><title>friday</title><link>https://renahud.github.io/devoxx-2022/notes/friday/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/friday/</guid><description/></item><item><title>Frontend</title><link>https://renahud.github.io/devoxx-2022/notes/frontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/frontend/</guid><description/></item><item><title>GraalVM</title><link>https://renahud.github.io/devoxx-2022/notes/GraalVM/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/GraalVM/</guid><description/></item><item><title>Internet Of Things</title><link>https://renahud.github.io/devoxx-2022/notes/Internet-of-Things/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Internet-of-Things/</guid><description/></item><item><title>IoT in the trenches at scale</title><link>https://renahud.github.io/devoxx-2022/notes/IoT-in-the-trenches-at-scale/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/IoT-in-the-trenches-at-scale/</guid><description>[[notes/Internet of Things|Iot]] usually follows a pattern
Sensors and actuators communicate with an application
but then there&amp;rsquo;s a lot of questions that arise when you want to scale:</description></item><item><title>java 19</title><link>https://renahud.github.io/devoxx-2022/notes/java-19/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/java-19/</guid><description>New features [[String blocks]] : multi line strings Smart casting ? [[notes/Pattern Matching]] [[notes/Record class]] [[notes/switch expressions]] [[notes/Project Loom]]</description></item><item><title>Java is agile</title><link>https://renahud.github.io/devoxx-2022/notes/Java-is-agile/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Java-is-agile/</guid><description>by Venkat Subramaniam
Java is Agile What is [[notes/agile]] ? Stand up metings ? Humans love ceremonies
SCRUM MASTERS !! = &amp;gt; LOL</description></item><item><title>LLM Transformers</title><link>https://renahud.github.io/devoxx-2022/notes/LLM-Transformers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/LLM-Transformers/</guid><description/></item><item><title>Microfronted with multiple frameworks</title><link>https://renahud.github.io/devoxx-2022/notes/Microfronted-with-multiple-frameworks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Microfronted-with-multiple-frameworks/</guid><description>Using Webpack 5 module Federation
Bookref:: Enterprise Angular
[[Microfrontend]]: applying the same reasonning that brought microservices to the frontend. That way, a team can have the responsibility of a domain on the whole stack.</description></item><item><title>Microfrontend</title><link>https://renahud.github.io/devoxx-2022/notes/Microfrontend/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Microfrontend/</guid><description>Architecture pattern for [[notes/frontend|frontend]] attplications that cover multiple [[notes/microservices|microservices]].</description></item><item><title>Microservices</title><link>https://renahud.github.io/devoxx-2022/notes/microservices/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/microservices/</guid><description>Architectural pattern consisting in dividing a complex application / domain in smaller &amp;ldquo;standalone&amp;rdquo; applications that can be deployed separately.</description></item><item><title>Pattern Matching</title><link>https://renahud.github.io/devoxx-2022/notes/Pattern-Matching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Pattern-Matching/</guid><description/></item><item><title>Project Loom</title><link>https://renahud.github.io/devoxx-2022/notes/Project-Loom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Project-Loom/</guid><description/></item><item><title>Qwik</title><link>https://renahud.github.io/devoxx-2022/notes/Qwik/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Qwik/</guid><description>A no hydration instant on personnalized web app.
The startup time of you application si key to make users stay and come back to the site.</description></item><item><title>Record class</title><link>https://renahud.github.io/devoxx-2022/notes/Record-class/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Record-class/</guid><description>simple pojo class with automatic
constructor hashcode equals tostring public members</description></item><item><title>Spring Boot</title><link>https://renahud.github.io/devoxx-2022/notes/Spring-Boot/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Spring-Boot/</guid><description/></item><item><title>Spring framework 6</title><link>https://renahud.github.io/devoxx-2022/notes/Spring-framework-6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Spring-framework-6/</guid><description>target date : 2022-11
[[notes/Spring Boot|Spring Boot]] 3.0 : idem
Steps to spring boot 3
Upgrate minor versions (migration guides) Java17 Check depreciation in code Blog post on spring.</description></item><item><title>switch expressions</title><link>https://renahud.github.io/devoxx-2022/notes/switch-expressions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/switch-expressions/</guid><description>A switch that returns a result. ends with a ; No mutation involved.</description></item><item><title>Taming hte event chaos using a workflow engine</title><link>https://renahud.github.io/devoxx-2022/notes/Taming-hte-event-chaos-using-a-workflow-engine/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Taming-hte-event-chaos-using-a-workflow-engine/</guid><description>4 laws of software development (Jeff Atwood) The nature of software is to expand software is limited by Moore&amp;rsquo;s law Software frowth makes Moore&amp;rsquo;s law possible Software is limited only by humad ambition and imagination Software development is a state of perpetual crisis.</description></item><item><title>The art of java language Pattern Matching</title><link>https://renahud.github.io/devoxx-2022/notes/The-art-of-java-language-Pattern-Matching/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/The-art-of-java-language-Pattern-Matching/</guid><description>Historically, we&amp;rsquo;ve had java.util.regex.
That&amp;rsquo;s not the subject, it&amp;rsquo;s gonna be about language level patterns.
A pattern is
a match predicate : determines whether the pattern matches a target pattern variables : conditionally extracted if the pattern matches the target.</description></item><item><title>Thursday</title><link>https://renahud.github.io/devoxx-2022/notes/thursday/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/thursday/</guid><description>Conferences [[notes/Confessions of a rusty java developer]] [[notes/IoT in the trenches at scale]] [[notes/Qwik]] [[notes/The art of java language Pattern Matching]] [[Taming hte event chaos using a workflow engine]]</description></item><item><title>wednesday</title><link>https://renahud.github.io/devoxx-2022/notes/wednesday/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/wednesday/</guid><description>Keynotes [[notes/Welcome to Devoxx 2022]] [[notes/Artificial Intelligence - You are here]] [[notes/Java is agile]] Conferences [[notes/Spring framework 6]] [[notes/Clean code with Records - Sealed Classes -Pattern matching]] [[notes/Microfronted with multiple frameworks]] [[notes/An introduction to Residual Theory]]</description></item><item><title>Welcome to Devoxx 2022</title><link>https://renahud.github.io/devoxx-2022/notes/Welcome-to-Devoxx-2022/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://renahud.github.io/devoxx-2022/notes/Welcome-to-Devoxx-2022/</guid><description>[[notes/artificial intelligence|AI]] [[LLM Transformers]] are the new hot thing in [[notes/artificial intelligence|AI]], replacing Neural Network ? Art : Stable Diffusion Dall-E 2 [[notes/java 19|Java 19]] [[notes/Pattern Matching]]</description></item></channel></rss>